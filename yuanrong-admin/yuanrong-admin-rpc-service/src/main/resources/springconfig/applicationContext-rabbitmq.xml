<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/rabbit
        http://www.springframework.org/schema/rabbit/spring-rabbit-1.3.xsd">

    <!-- 配置扫描的包 -->
    <context:component-scan base-package="com.yuanrong.admin.rpc.service.impl.mq"/>

    <!--配置connection-factory，指定连接rabbit server参数-->
    <!--<rabbit:connection-factory id="connectionFactory" host="${mq.host}" username="${mq.username}" password="${mq.password}"
                               publisher-confirms="true" publisher-returns="true"  channel-cache-size="1"/>-->


    <bean id="connectionFactory"  class="org.springframework.amqp.rabbit.connection.CachingConnectionFactory">
        <constructor-arg value="${mq.host}" />
        <property name="username" value="${mq.username}" />
        <property name="password" value="${mq.password}" />
        <!--<property name="port" value="${mq.port}" />-->
        <!-- 缓存中要维护的通道数 -->
        <property name="channelCacheSize" value="5" />
        <!-- 开启发送确认机制 -->
        <property name="publisherConfirms" value="true"/>
        <!-- 开启结果返回机制 -->
        <property name="publisherReturns" value="true"/>
    </bean>
    <!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成-->
    <rabbit:admin connection-factory="connectionFactory"/>

    <!--
    durable:是否持久化
    exclusive: 仅创建者可以使用的私有队列，断开后自动删除
    auto_delete: 当所有消费客户端连接断开后，是否自动删除队列
     -->
    <!--定义queue-->
    <rabbit:queue id="com.yuanrong.account" name="com.yuanrong.account" durable="true" auto-delete="false" exclusive="false"/>


    <!-- 定义direct exchange，绑定com.mj.test queue -->
    <rabbit:direct-exchange name="myChange" durable="true" auto-delete="false" >
        <rabbit:bindings>
            <rabbit:binding queue="com.yuanrong.account" key="accountKey"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <!--定义rabbit template用于数据的接收和发送-->
   <!-- <rabbit:template id="myAmqpTemplate" connection-factory="connectionFactory" exchange="myChange" />

    &lt;!&ndash; 接受 &ndash;&gt;
    <bean id="messageReceiver" class="com.yuanrong.admin.rpc.service.impl.mq.QueueListenter"></bean>
    <rabbit:listener-container connection-factory="connectionFactory">
        <rabbit:listener queues="com.yuanrong.test" ref="messageReceiver"/>
    </rabbit:listener-container>-->



    <bean class="org.springframework.amqp.rabbit.core.RabbitTemplate" id="rabbitTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="exchange" value="myChange" />

        <!-- 启动AMQP协议层面事务机制来解决发送确认机制，但是采用事务机制实现会降低RabbitMQ的消息吞吐量。
        RabbitMQ团队为我们拿出了更好的方案，即采用发送方确认模式，事务机制和confirmCallback只能二选一 -->
        <!-- <property name="channelTransacted" value="true" /> -->

        <!-- mandatory 监听是否有符合的队列 -->
        <property name="mandatory" value="true"/>

        <!-- 设置发送确认回执监听方法 -->
        <property name="confirmCallback" ref="confirmcallback" />
        <!-- 设置结果返回监听方法 -->
        <property name="returnCallback" ref="MyReturnCallback"/>
        <!-- 设置消息转换 -->
        <!--<property name="messageConverter" ref="JsonMessageConverter" />-->
    </bean>

   <!-- <bean id="JsonMessageConverter" class="org.springframework.amqp.support.converter.JsonMessageConverter">
        &lt;!&ndash; if necessary, override the DefaultClassMapper &ndash;&gt;
        <property name="classMapper" ref="customClassmapper" />
    </bean>-->

    <!--<bean id="customClassmapper" class="com.yuanrong.admin.rpc.service.impl.mq.CustomClassMapper"/>-->
    <bean id="confirmcallback" class="com.yuanrong.admin.rpc.service.impl.mq.ConfirmReturnBack"/>
    <bean id="MyReturnCallback" class="com.yuanrong.admin.rpc.service.impl.mq.MyReturnCallback"/>
    <!--<rabbit:listener-container prefetch="1" connection-factory="connectionFactory" acknowledge="manual">
        <rabbit:listener  queues="com.yuanrong.account" ref="messageReceiver" />
    </rabbit:listener-container>
-->
    <!-- 自定义消息接收者 -->
   <!-- <bean id="messageReceiver" class="com.yuanrong.admin.rpc.service.impl.mq.AccountConsumer"></bean>
-->
</beans>